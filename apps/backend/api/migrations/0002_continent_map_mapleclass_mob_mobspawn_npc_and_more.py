# Generated by Django 5.2.7 on 2025-10-14 02:55

import django.db.models.deletion
import simple_history.models
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("api", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Continent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        db_index=True, default=uuid.uuid4, editable=False, unique=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "deleted_at",
                    models.DateTimeField(blank=True, db_index=True, null=True),
                ),
                (
                    "source_id",
                    models.IntegerField(
                        blank=True, db_index=True, default=None, unique=True
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True, default="")),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Map",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        db_index=True, default=uuid.uuid4, editable=False, unique=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "deleted_at",
                    models.DateTimeField(blank=True, db_index=True, null=True),
                ),
                (
                    "source_id",
                    models.IntegerField(
                        blank=True, db_index=True, default=None, unique=True
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True, default="")),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="MapleClass",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        db_index=True, default=uuid.uuid4, editable=False, unique=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "deleted_at",
                    models.DateTimeField(blank=True, db_index=True, null=True),
                ),
                (
                    "source_id",
                    models.IntegerField(
                        blank=True, db_index=True, default=None, unique=True
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True, default="")),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Mob",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        db_index=True, default=uuid.uuid4, editable=False, unique=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "deleted_at",
                    models.DateTimeField(blank=True, db_index=True, null=True),
                ),
                (
                    "source_id",
                    models.IntegerField(
                        blank=True, db_index=True, default=None, unique=True
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True, default="")),
                ("hp", models.IntegerField()),
                ("mp", models.IntegerField()),
                ("exp", models.IntegerField()),
                ("mesos", models.IntegerField()),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="MobSpawn",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        db_index=True, default=uuid.uuid4, editable=False, unique=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "deleted_at",
                    models.DateTimeField(blank=True, db_index=True, null=True),
                ),
            ],
        ),
        migrations.CreateModel(
            name="NPC",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        db_index=True, default=uuid.uuid4, editable=False, unique=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "deleted_at",
                    models.DateTimeField(blank=True, db_index=True, null=True),
                ),
                (
                    "source_id",
                    models.IntegerField(
                        blank=True, db_index=True, default=None, unique=True
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True, default="")),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="NPCLocation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        db_index=True, default=uuid.uuid4, editable=False, unique=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "deleted_at",
                    models.DateTimeField(blank=True, db_index=True, null=True),
                ),
            ],
            options={
                "db_table": "game_npc_location",
            },
        ),
        migrations.CreateModel(
            name="NPCShopItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        db_index=True, default=uuid.uuid4, editable=False, unique=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "deleted_at",
                    models.DateTimeField(blank=True, db_index=True, null=True),
                ),
                ("price", models.IntegerField(help_text="Price in mesos")),
            ],
            options={
                "db_table": "game_npc_shop_item",
                "ordering": ["price"],
            },
        ),
        migrations.CreateModel(
            name="Quest",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        db_index=True, default=uuid.uuid4, editable=False, unique=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "deleted_at",
                    models.DateTimeField(blank=True, db_index=True, null=True),
                ),
                (
                    "source_id",
                    models.IntegerField(
                        blank=True, db_index=True, default=None, unique=True
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True, default="")),
                (
                    "quest_line",
                    models.CharField(blank=True, default="", max_length=200),
                ),
                ("meso_reward", models.IntegerField(blank=True, null=True)),
                ("exp_reward", models.IntegerField(blank=True, null=True)),
                ("required_level", models.IntegerField(blank=True, null=True)),
                ("misc_requirements", models.JSONField(blank=True, null=True)),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="QuestReward",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        db_index=True, default=uuid.uuid4, editable=False, unique=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "deleted_at",
                    models.DateTimeField(blank=True, db_index=True, null=True),
                ),
                ("quantity", models.IntegerField(default=1)),
                ("reward_group", models.IntegerField(default=0)),
            ],
            options={
                "db_table": "game_quest_reward",
                "ordering": ["reward_group", "item__name"],
            },
        ),
        migrations.CreateModel(
            name="Region",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        db_index=True, default=uuid.uuid4, editable=False, unique=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "deleted_at",
                    models.DateTimeField(blank=True, db_index=True, null=True),
                ),
                (
                    "source_id",
                    models.IntegerField(
                        blank=True, db_index=True, default=None, unique=True
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True, default="")),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Skill",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        db_index=True, default=uuid.uuid4, editable=False, unique=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "deleted_at",
                    models.DateTimeField(blank=True, db_index=True, null=True),
                ),
                (
                    "source_id",
                    models.IntegerField(
                        blank=True, db_index=True, default=None, unique=True
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True, default="")),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.AlterModelOptions(
            name="item",
            options={"ordering": ["name"]},
        ),
        migrations.RemoveField(
            model_name="item",
            name="price",
        ),
        migrations.RemoveField(
            model_name="item",
            name="seller",
        ),
        migrations.AddField(
            model_name="item",
            name="attributes",
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="item",
            name="category",
            field=models.CharField(
                blank=True,
                choices=[
                    ("weapon", "Weapon"),
                    ("armor", "Armor"),
                    ("accessory", "Accessory"),
                    ("consumable", "Consumable"),
                    ("ammo", "Ammo"),
                    ("scroll", "Scroll"),
                    ("quest", "Quest Item"),
                    ("misc", "Miscellaneous"),
                ],
                default="",
                max_length=20,
            ),
        ),
        migrations.AddField(
            model_name="item",
            name="slot",
            field=models.CharField(
                blank=True,
                choices=[
                    ("equip", "Equipment"),
                    ("use", "Consumable"),
                    ("setup", "Setup"),
                    ("etc", "Etc"),
                    ("cash", "Cash"),
                ],
                default="",
                max_length=20,
            ),
        ),
        migrations.AddField(
            model_name="item",
            name="source_id",
            field=models.IntegerField(
                blank=True, db_index=True, default=None, unique=True
            ),
        ),
        migrations.AddField(
            model_name="item",
            name="subcategory",
            field=models.CharField(blank=True, default="", max_length=50),
        ),
        migrations.AlterField(
            model_name="item",
            name="description",
            field=models.TextField(blank=True, default=""),
        ),
        migrations.CreateModel(
            name="CraftingRecipe",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        db_index=True, default=uuid.uuid4, editable=False, unique=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "deleted_at",
                    models.DateTimeField(blank=True, db_index=True, null=True),
                ),
                (
                    "source_id",
                    models.IntegerField(
                        blank=True, db_index=True, default=None, unique=True
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True, default="")),
                ("result_quantity", models.IntegerField(default=1)),
                ("meso_cost", models.IntegerField(blank=True, null=True)),
                (
                    "result_item",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="crafted_by_recipes",
                        to="api.item",
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="CraftingIngredient",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        db_index=True, default=uuid.uuid4, editable=False, unique=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "deleted_at",
                    models.DateTimeField(blank=True, db_index=True, null=True),
                ),
                ("quantity", models.IntegerField(default=1)),
                (
                    "item",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="api.item"
                    ),
                ),
                (
                    "recipe",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.craftingrecipe",
                    ),
                ),
            ],
            options={
                "db_table": "game_crafting_ingredient",
                "ordering": ["item__name"],
            },
        ),
        migrations.CreateModel(
            name="GuildFame",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        db_index=True, default=uuid.uuid4, editable=False, unique=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "deleted_at",
                    models.DateTimeField(blank=True, db_index=True, null=True),
                ),
                ("value", models.IntegerField(choices=[(-1, "Defame"), (1, "Fame")])),
                (
                    "guild",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="fame",
                        to="api.guild",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="guild_fame_given",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="GuildTag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        db_index=True, default=uuid.uuid4, editable=False, unique=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "deleted_at",
                    models.DateTimeField(blank=True, db_index=True, null=True),
                ),
                (
                    "value",
                    models.CharField(
                        choices=[
                            ("bossers", "Bossers"),
                            ("casuals", "Casuals"),
                            ("dead_guild", "Dead Guild"),
                            ("drama", "Drama"),
                            ("f2p_pride", "F2P Pride"),
                            ("fashion_story", "FashionStory"),
                            ("helpful", "Helpful"),
                            ("moguls", "Moguls"),
                            ("no_lifers", "No-Lifers"),
                            ("noob_friendly", "Noob Friendly"),
                            ("pq_enjoyers", "PQ Enjoyers"),
                            ("social", "Social"),
                            ("uncs", "Uncs"),
                            ("weebs", "Weebs"),
                            ("wholesome", "Wholesome"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "guild",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tags",
                        to="api.guild",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="guild_tags_given",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="HistoricalGuildFame",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                (
                    "deleted_at",
                    models.DateTimeField(blank=True, db_index=True, null=True),
                ),
                ("value", models.IntegerField(choices=[(-1, "Defame"), (1, "Fame")])),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "guild",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="api.guild",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical guild fame",
                "verbose_name_plural": "historical guild fames",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalGuildTag",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                (
                    "deleted_at",
                    models.DateTimeField(blank=True, db_index=True, null=True),
                ),
                (
                    "value",
                    models.CharField(
                        choices=[
                            ("bossers", "Bossers"),
                            ("casuals", "Casuals"),
                            ("dead_guild", "Dead Guild"),
                            ("drama", "Drama"),
                            ("f2p_pride", "F2P Pride"),
                            ("fashion_story", "FashionStory"),
                            ("helpful", "Helpful"),
                            ("moguls", "Moguls"),
                            ("no_lifers", "No-Lifers"),
                            ("noob_friendly", "Noob Friendly"),
                            ("pq_enjoyers", "PQ Enjoyers"),
                            ("social", "Social"),
                            ("uncs", "Uncs"),
                            ("weebs", "Weebs"),
                            ("wholesome", "Wholesome"),
                        ],
                        max_length=50,
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "guild",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="api.guild",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical guild tag",
                "verbose_name_plural": "historical guild tags",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="Job",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        db_index=True, default=uuid.uuid4, editable=False, unique=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "deleted_at",
                    models.DateTimeField(blank=True, db_index=True, null=True),
                ),
                (
                    "source_id",
                    models.IntegerField(
                        blank=True, db_index=True, default=None, unique=True
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True, default="")),
                (
                    "maple_class",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="jobs",
                        to="api.mapleclass",
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="MarketplaceItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        db_index=True, default=uuid.uuid4, editable=False, unique=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "deleted_at",
                    models.DateTimeField(blank=True, db_index=True, null=True),
                ),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField()),
                ("price", models.DecimalField(decimal_places=0, max_digits=12)),
                (
                    "seller",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="marketplace_items",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ItemDrop",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        db_index=True, default=uuid.uuid4, editable=False, unique=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "deleted_at",
                    models.DateTimeField(blank=True, db_index=True, null=True),
                ),
                (
                    "drop_rate",
                    models.FloatField(help_text="Drop rate as a decimal (0.0 to 1.0)"),
                ),
                (
                    "item",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="api.item"
                    ),
                ),
                (
                    "mob",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="api.mob"
                    ),
                ),
            ],
            options={
                "ordering": ["-drop_rate"],
            },
        ),
        migrations.AddField(
            model_name="item",
            name="dropped_by",
            field=models.ManyToManyField(
                related_name="item_drops", through="api.ItemDrop", to="api.mob"
            ),
        ),
        migrations.AddIndex(
            model_name="item",
            index=models.Index(
                fields=["slot", "category"], name="api_item_slot_7bebb5_idx"
            ),
        ),
        migrations.AddField(
            model_name="mobspawn",
            name="map",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="api.map"
            ),
        ),
        migrations.AddField(
            model_name="mobspawn",
            name="mob",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="api.mob"
            ),
        ),
        migrations.AddField(
            model_name="mob",
            name="spawns_in",
            field=models.ManyToManyField(
                related_name="mob_spawns", through="api.MobSpawn", to="api.map"
            ),
        ),
        migrations.AddField(
            model_name="craftingrecipe",
            name="crafter_npc",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="crafting_recipes",
                to="api.npc",
            ),
        ),
        migrations.AddField(
            model_name="npclocation",
            name="map",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="api.map"
            ),
        ),
        migrations.AddField(
            model_name="npclocation",
            name="npc",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="api.npc"
            ),
        ),
        migrations.AddField(
            model_name="npc",
            name="appears_in",
            field=models.ManyToManyField(
                related_name="npc_locations", through="api.NPCLocation", to="api.map"
            ),
        ),
        migrations.AddField(
            model_name="npcshopitem",
            name="item",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="api.item"
            ),
        ),
        migrations.AddField(
            model_name="npcshopitem",
            name="npc",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="api.npc"
            ),
        ),
        migrations.AddField(
            model_name="npc",
            name="sells",
            field=models.ManyToManyField(
                related_name="sold_by_npcs", through="api.NPCShopItem", to="api.item"
            ),
        ),
        migrations.AddField(
            model_name="quest",
            name="prerequisite_quest",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="unlocks_quests",
                to="api.quest",
            ),
        ),
        migrations.AddField(
            model_name="quest",
            name="required_class",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="class_quests",
                to="api.mapleclass",
            ),
        ),
        migrations.AddField(
            model_name="quest",
            name="required_job",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="job_quests",
                to="api.job",
            ),
        ),
        migrations.AddField(
            model_name="quest",
            name="started_by",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="quests",
                to="api.npc",
            ),
        ),
        migrations.AddField(
            model_name="questreward",
            name="item",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="api.item"
            ),
        ),
        migrations.AddField(
            model_name="questreward",
            name="quest",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="api.quest"
            ),
        ),
        migrations.AddField(
            model_name="region",
            name="continent",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="regions",
                to="api.continent",
            ),
        ),
        migrations.AddField(
            model_name="map",
            name="region",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="maps",
                to="api.region",
            ),
        ),
        migrations.AddField(
            model_name="skill",
            name="job",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="skills",
                to="api.job",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="craftingingredient",
            unique_together={("recipe", "item")},
        ),
        migrations.AlterUniqueTogether(
            name="guildfame",
            unique_together={("guild", "user")},
        ),
        migrations.AlterUniqueTogether(
            name="guildtag",
            unique_together={("guild", "user", "value")},
        ),
        migrations.AlterUniqueTogether(
            name="itemdrop",
            unique_together={("item", "mob")},
        ),
        migrations.AlterUniqueTogether(
            name="mobspawn",
            unique_together={("mob", "map")},
        ),
        migrations.AlterUniqueTogether(
            name="npclocation",
            unique_together={("npc", "map")},
        ),
        migrations.AlterUniqueTogether(
            name="npcshopitem",
            unique_together={("npc", "item")},
        ),
        migrations.AlterUniqueTogether(
            name="questreward",
            unique_together={("quest", "item")},
        ),
    ]
